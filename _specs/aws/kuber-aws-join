#!/usr/bin/env bash

# Licensed to Datalayer (http://datalayer.io) under one or more
# contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. Datalayer licenses this file
# to you under the Apache License, Version 2.0 (the 
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

function install_service() {
  curl curl https://raw.githubusercontent.com/datalayer/kuber/master/specs/aws/kuber-aws-join.service -o /etc/systemd/system/kuber-aws-join.service
  systemctl daemon-reload
  systemctl enable kuber-aws-join.service
# systemctl start kuber-aws-join
# systemctl status kuber-aws-join
# journalctl -fu kuber-aws-join
# journalctl -lxeu kuber-aws-join
}

function install_docker() {
  mkdir /etc/docker
  cat << EOF_D1 > /etc/docker/daemon.json
  {
    "exec-opts": ["native.cgroupdriver=cgroupfs"]
  }
EOF_D1
  cat << EOF_D2 > /root/install-docker.sh
sudo apt -y remove docker docker-engine docker.io docker-ce
sudo apt update
sudo apt -y install \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
sudo apt -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"
sudo apt update
sudo apt -y install docker-ce
systemctl daemon-reload
systemctl restart docker
EOF_D2
  chmod +x /root/install-docker.sh && /root/install-docker.sh
}

function install_kubeadm() {
  cat <<EOF_K1 > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF_K1
  cat << EOF_K2 > /root/install-kubeadm.sh
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
apt update
apt install -y apt-transport-https
apt install -y --allow-unauthenticated \
  kubelet=1.8.4-00 \
  kubeadm=1.8.4-00 \
  kubectl=1.8.4-00
EOF_K2
  chmod +x /root/install-kubeadm.sh && /root/install-kubeadm.sh
  # cat <<EOF >/etc/systemd/system/kubelet.service.d/90-local-extras.conf
  # --fail-swap-on=false 
  cat <<EOF_K3 >>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf
Environment="KUBELET_EXTRA_ARGS=--cgroup-driver=cgroupfs --cloud-provider=aws"
EOF_K3
  systemctl daemon-reload && systemctl restart kubelet
}

function join_kuber() {
  PUBLIC_IP=$(ec2metadata --public-ipv4 | cut -d " " -f 2)
  PRIVATE_IP=$(ec2metadata --local-ipv4 | cut -d " " -f 2)
  PRIVATE_HOSTNAME=$(ec2metadata --local-hostname | cut -d " " -f 2)
  EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
  EC2_REGION="`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
  EC2_INSTANCE_ID="`wget -q -O - http://instance-data/latest/meta-data/instance-id || die \"wget instance-id has failed: $?\"`"
  aws ec2 create-tags --resources $EC2_INSTANCE_ID --region $EC2_REGION --tags Key=Name,Value=$PRIVATE_HOSTNAME
  aws ec2 create-tags --resources $EC2_INSTANCE_ID --region $EC2_REGION --tags Key=KubernetesCluster,Value=kubernetes
  aws ec2 create-tags --resources $EC2_INSTANCE_ID --region $EC2_REGION --tags Key=KubernetesRole,Value=worker
  rm /root/kubeadm-aws-join.conf
#  rm /root/kubeadm.out
  kubeadm reset
  cat <<EOF_J > /root/kubeadm-aws-join.conf
apiVersion: kubeadm.k8s.io/v1alpha1
kind: NodeConfiguration
kubernetesVersion: 1.8.3
token: $TOKEN
nodeName: $PRIVATE_HOSTNAME
discoveryTokenAPIServers:
- $MASTER
discoveryTokenCACertHashes:
- $HASH
EOF_J
  # kubeadm join --config=/root/kubeadm.conf > /root/kubeadm.out
  kubeadm join --config=/root/kubeadm-aws-join.conf
}

sysctl net.bridge.bridge-nf-call-iptables=1
apt install -y awscli jq

KUBER_JSON=$(curl 'http://datalayer.io/kuber.json')
MASTER=$(echo $KUBER_JSON | jq -r '.master')
TOKEN=$(echo $KUBER_JSON | jq -r '.token')
HASH=$(echo $KUBER_JSON | jq -r '.hash')

install_service
install_docker
install_kubeadm
join_kuber
